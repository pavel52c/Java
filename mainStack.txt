Integer[] arr = new Integer[10];
        Integer[] arr1 = new Integer[10];

        for (int i = 0; i < 9; ++i) {
            arr[i] = i;
        }

        int size = 0;
        Stack<Integer> stack = new Stack<>(arr);
        Stack<Integer> stack1 = new Stack<>(arr1);

        try {
            System.out.println("Size stack1 1: " + stack1.getSize());
            System.out.println("stack1.peek(): " + stack1.peek());
        } catch (Exception error) {
            System.out.println(error.getMessage());
        }

        try {
            System.out.println("stack.peek(): " + stack.peek());
        } catch (Exception error) {
            error.getMessage();
        }

        try {
            System.out.println("stack.pop()");
            stack.pop();
            System.out.println("stack.peek(): " + stack.peek());
        } catch (Exception error) {
            error.getMessage();
        }

        System.out.println("stack.push(10)");
        stack.push(10);
        try {
            System.out.println("stack.peek(): " + stack.peek());
        } catch (Exception error) {
            error.getMessage();
        }
	


        str = "3+4*2%(2-(5-2*2))";
        System.out.println("String: " + str);
        try {
            str = toPoliz(str);
            System.out.println("In poliz: " + str);
        } catch (Exception error) {
            System.out.println(error.getMessage());
        }

        try {
            System.out.println("From poliz: " + fromPoliz(str));
        } catch (Exception error){
            System.out.println(error.getMessage());
        }



    public static String toPoliz(String s) throws Exception {
        String[] str = s.split("");
        Stack<String> numbers = new Stack<>(new String[10]);
        Stack<String> signs = new Stack<>(new String[10]);
        String res = "";

        for (String a : str) {
            boolean b = a.equals("-") || a.equals("+") || a.equals("*") || a.equals("/") || a.equals("%") || a.equals("(");
            if (b) {
                if (signs.isEmpty())
                    signs.push(a);
                else {
                    int k = priority(signs.peek());
                    if (a.equals("(") || k <= priority(a))
                        signs.push(a);
                    else {
                        String s1, s2;
                        try {
                            s1 = numbers.pop();
                            s2 = numbers.pop();
                        } catch (Exception e) {
                            System.out.println(e.getMessage());
                            break;
                        }
                        res += s2 + s1 + a;
                        numbers.push(res);
                        res = "";
                    }
                }
            } else {
                if (a.equals(")")) {
                    while (!signs.peek().equals("(")) {
                        String s1, s2;
                        try {
                            s1 = numbers.pop();
                            s2 = numbers.pop();
                        } catch (Exception e) {
                            System.out.println(e.getMessage());
                            break;
                        }
                        res += s2 + s1 + signs.pop();
                        numbers.push(res);
                        res = "";
                    }
                    signs.pop();
                } else
                    numbers.push(a);
            }
        }
        while (!signs.isEmpty()) {
            String s1, s2;
            try {
                s1 = numbers.pop();
                s2 = numbers.pop();
            } catch (Exception e) {
                System.out.println(e.getMessage());
                break;
            }
            res += s2 + s1 + signs.pop();
            numbers.push(res);
            res = "";
        }

        if (!signs.isEmpty())
            throw new Exception("Знаки ещё есть");

        return numbers.pop();
    }

    public static int priority(String str) {
        if (str.equals("+") || str.equals("-"))
            return 1;
        else if (str.equals("*") || str.equals("/") || str.equals("%"))
            return 2;
        else
            return 0;
    }

    public static Double fromPoliz(String str) throws Exception {
        String[] splitStr = str.split("");
        Stack<Double> numbers = new Stack<>(new Double[10]);
        for (String a : splitStr) {
            boolean b = a.equals("-") || a.equals("+") || a.equals("*") || a.equals("/") || a.equals("%");
            if (b) {
                try {
                    Double k = numbers.pop();
                    k = resultDouble(numbers.pop(), k, a);
                    numbers.push(k);
                } catch (RuntimeException e) {
                    throw new RuntimeException(e.getMessage());
                } catch (Exception error) {
                    System.out.println(error.getMessage());
                }
            } else {
                numbers.push(Double.parseDouble(a));
            }
        }
        return numbers.pop();
    }

    public static Double resultDouble(Double a, Double b, String sign) {
        switch (sign) {
            case "+":
                return a + b;
            case "-":
                return a - b;
            case "*":
                return a * b;
            case "/":
                if (b != 0)
                    return a / b;
                throw new ArithmeticException("Division by zero!");
            default:
                if (b != 0)
                    return a % b;
                throw new ArithmeticException("Division by zero!");
        }
    }
